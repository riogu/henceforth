use crate::tokens::Token;

impl Token {
    fn str(&self) -> String {
        match self {
            Token::Literal(literal)  => format!("{:?}", literal), 
            Token::Let               => "let".to_string(),
            Token::Mut               => "mut".to_string(),
            Token::If                => "if".to_string(),
            Token::Else              => "else".to_string(),
            Token::While             => "while".to_string(),
            Token::For               => "for".to_string(),
            Token::In                => "in".to_string(),
            Token::Break             => "break".to_string(),
            Token::Continue          => "continue".to_string(),
            Token::Return            => "return".to_string(),
            Token::Function          => "function".to_string(),
            Token::Fn                => "fn".to_string(),
            Token::Plus              => "+".to_string(),
            Token::Minus             => "-".to_string(),
            Token::Star              => "*".to_string(),
            Token::Slash             => "/".to_string(),
            Token::Percent           => "%".to_string(),
            Token::Equal             => "==".to_string(),
            Token::NotEqual          => "!=".to_string(),
            Token::Less              => "<".to_string(),
            Token::LessEqual         => "<=".to_string(),
            Token::Greater           => ">".to_string(),
            Token::GreaterEqual      => ">=".to_string(),
            Token::And               => "&&".to_string(),
            Token::Or                => "||".to_string(),
            Token::Not               => "!".to_string(),
            Token::Assign            => "=".to_string(),
            Token::PlusAssign        => "+=".to_string(),
            Token::MinusAssign       => "-=".to_string(),
            Token::StarAssign        => "*=".to_string(),
            Token::SlashAssign       => "/=".to_string(),
            Token::LeftParen         => "(".to_string(),
            Token::RightParen        => ")".to_string(),
            Token::LeftBrace         => "{".to_string(),
            Token::RightBrace        => "}".to_string(),
            Token::LeftBracket       => "[".to_string(),
            Token::RightBracket      => "]".to_string(),
            Token::Semicolon         => ";".to_string(),
            Token::Comma             => ",".to_string(),
            Token::Dot               => ".".to_string(),
            Token::Colon             => ":".to_string(),
            Token::Arrow             => "->".to_string(),
            Token::Newline           => "\\n".to_string(),
            Token::Eof               => "EOF".to_string(),
        }
    }
}
